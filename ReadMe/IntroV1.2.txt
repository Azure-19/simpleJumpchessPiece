alpha1.2_version

---学习用引擎，实现了基础的功能---

** 要用引擎的接口，客户端需要包含Engine.h! **

事件系统介绍：
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
在 WindowsWindow 中使用glfw窗口函数得到窗口事件的控制权. Window.h提供一个抽象接口,在Application中将Onevent函数和窗口回调函数绑定，令到App的Onevent实际上重写glfw的窗口回调函数。在Application的Onevent中任何函数都可以通过事件分发器EventDispatcher把glfw传回包含捕获对应属性的Event对象和想要使用它的函数绑定，进而实现用户端重写事件回调。
提供了Event类，覆写Onevent的权利和与事件关系紧密的组件Button
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
使用示例：
void Client::OnEvent(Engine::Event& e)
{
	Engine::EventDispatcher dispatcher(e);
	dispatcher.Dispatch<Engine::MouseButtonPressedEvent>(EG_BIND_EVENT_FN(Client::OnMouseButtonPressed));
}
Client是一个App或Layer的子类。MouseButtonPressedEvent是捕获的事件类型，Client::OnMouseButtonPressed是想要重写的回调函数名(要能访问到)
Layer可以使用事件系统的原因在于App的Onevent中调用了Layer的Onevent，按钮及其子类的Onevent函数同理，只需要在上一级依赖的Onevent中被调用就可以充当覆写回调函数的角色。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
关系如：
Application::OnEvent   --绑定->    WindowAPI::EventCallbakFn     --抽象->     WindowsWindow::Set.....Fn      --分发调用->   glfw具体方法    <-提供定义--     Event.h

glfwWindowfunction--跳过抽象层级提供Event对象->    Application::OnEvent  --调用->   Layer::OnEvent    --提供接口->   任何你想要的回调函数

===================================================================================================================================




渲染系统介绍：
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
比较复杂的基于多平台扩展性的抽象API，目前的唯一实现是Opengl，仅支持2D渲染，尚未支持批处理渲染等。
API的工作方式是提供静态构造函数，取得对应图形接口实现文件类的单例。目前能以窗口坐标或gl坐标实现任意方形的渲染(16:9)，包括材质，染色和处理简单遮挡关系。
渲染必须在抽象的OnUpdate方法中进行，支持不定帧率，同时更新
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
使用示例：
(OnUpdate中)
		Engine::RenderCommand::SetClearColor({ 0.1f, 0.12f, 0.11f, 1.0f });
		Engine::RenderCommand::Clear();

		Engine::Renderer2D::BeginScene(m_CameraController.GetCamera());
		{
			Engine::Renderer2D::DrawCoord({ 0.0f, 720.0f }, { 1280.0f, 0.0f }, m_BackgroundTexture);
			Engine::Renderer2D::DrawButton(m_StartButton, m_BottonTexture);
			Engine::Renderer2D::DrawRotatedQuad({ -1.0f, 0.0f }, { 0.5f, 0.5f }, glm::radians(45.0f), {0.4f,0.6f,0.8f,1.0f});
			Engine::Renderer2D::DrawQuad({ 0.5f, 0.5f }, { 0.7f, 1.0f }, m_SquareColor);
			Engine::Renderer2D::DrawRotatedQuad({ 0.2f,-0.5f, -0.1f }, { 5.0f, 5.0f }, glm::radians(30.0f), m_Texture, 10.0f, glm::vec4(1.0f, 0.9f, 0.9f, 1.0f));	
		}
		Engine::Renderer2D::EndScene();
展示了初始化，开启上下文，发出渲染指令，结束上下文的用法， 原理见Renderer文件夹对应Opengl的文件夹的各类文件和opengl接口参考文档：docs.gl


===================================================================================================================================
窗口输入介绍：
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
把glfw的按键码本地化实现轮询输入，高灵敏地检查各类基本输入(Input类中)，持续检查和刷新。
窗口原生比例1280*720,事实上可以做到窗口的任意拖拽放大(会产生拉伸或是分辨率挤压导致的模糊)。
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
获取输入使用示例：
if (Engine::Input::IsMouseButtonPressed(EG_MOUSE_BUTTON_1)){}

Engine::Input::GetMouseX()

其中EG_MOUSE_BUTTON_1是按键码，代表左键，可用于输入事件前置判断条件。GetMouseX等函数可以得到当前鼠标的位置(窗口坐标)。更多用法和功能详见Input类定义，按键码查询Keycodes.h文件


===================================================================================================================================
层、应用、相机、日志、宏、性能工具等系统介绍：
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
层是承载应用的方式，每一层有着自己的事件逻辑(OnEvent)和更新逻辑(OnUpdate),是分割应用不同场景的简单工具，由LayerStack管理。
应用(Application类)只允许一个单例存在，在应用项目中被继承定义，几乎存在于程序整个生命周期中。持有LayerStack和窗口的单例，抽象层次最高，拥有一个Get方法，为需要的控件提供这个单例的引用。
相机系统比较原始，16:9由此定义，经过矩阵运算控制渲染系统放大缩小旋转移动画面，OnEvent中使用会卡顿
日志系统可以用不同警示颜色打印信息，显示时间戳。
宏系统包含Debug和编译方式，另外也用于日志系统，事件系统的简化代码中(譬如绑定函数)。
性能工具可以简易监视程序每一步所需时间，得到的.json文件在Chrome自带的可视化工具可以观察。(Chrome://tracing)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
使用示例：
(客户端中)
GameLayer::GameLayer()
	: Layer("GameLayer"), m_CameraController(1280.0f / 720.0f)//, m_Chessboard(teamCount)
{
}
class GameApp : public Engine::Application
{
public:
	GameApp()
	{
		PushLayer(new GameLayer());
		PushLayer(new Menu());
	}
	~GameApp()
	{
	}
};
Engine::Application* Engine::CreateApplication()
{
	return new GameApp;
}

以上是部分定义客户端和加入新层的方式。
----------------------------------------------------------------
#define EG_CORE_TRACE(...)   ::Engine::Log::GetCoreLogger()->trace(__VA_ARGS__)
EG_WARN("MousePressed, castPosition:({0}, {1})", castPosition[0], castPosition[1]);

日志系统的定义和使用例，可以一次打印多变量
----------------------------------------------------------------
(OnUpdate中)
m_CameraController.OnUpdate(ts);      ----   启用相机
相机系统定义见持有相机控制器的层定义方式。

----------------------------------------------------------------
EG_ASSERT(j == 10, "Exeption: chessArray havn't init completely");
左侧加入想要监视的变量，如果是false就会编译时报错并提醒检查(或是来到此分支)
Ref和Scope的定义在Core.h中，以别名代替shared_ptr和unique_ptr属于指针管理及其引擎化

----------------------------------------------------------------
	EG_PROFILE_BEGIN_SESSION("Startup", "EngineProfile-Startup.json");
	EG_PROFILE_END_SESSION();
表示开始纪录一些数据到某个文件中。
	EG_PROFILE_FUNCTION();
	EG_PROFILE_SCOPE("Render Call");
表示纪录某函数或某作用域所花费时间。
在Instrumentor.h中将EG_PROFILE定义为0即可关闭性能监视纪录


===================================================================================================================================

v1.1更新
<1>加入LayerButton，现在可以用这类按钮实现层操作了
<2>Layer实现了disable/enable，App里不再对被禁用的Layer进行事件
<3>用户端提供完整棋子初始化，实现层级架构和层间切换
<4>整理文件结构，日常维护
<5>SwitchButton，和临时的访问layer传值方式


v1.2更新
<1>批处理渲染和动态渲染的初步，可以做些简单的状态渲染了
<2>sandbox中简单的特效示例代码
<3>纹理图集、精灵图的初步支持，理论上可以渲染动图了
<4>帧缓冲初步